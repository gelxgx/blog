import{q as n,g as e,K as a}from"./common-1984dd55.js";const r='{"title":"【源码第六期】检测npm名称源码分析","frontmatter":{"date":"2021-11-16","title":"【源码第六期】检测npm名称源码分析","tags":["源码"],"describe":"浅析 validate-npm-package-name源码"},"headers":[{"level":3,"title":"1. 这是什么？","slug":"_1-这是什么？"},{"level":3,"title":"","slug":""},{"level":3,"title":"2.学习目标","slug":"_2-学习目标"},{"level":3,"title":"3.阅读源码","slug":"_3-阅读源码"},{"level":3,"title":"4. 总结","slug":"_4-总结"}],"relativePath":"docs/soundCode/validate-npm-package-name.md","lastUpdated":1646063815125.8818}';var t={};const i=[a('<h3 id="_1-这是什么？"><a class="header-anchor" href="#_1-这是什么？" aria-hidden="true">#</a> 1. 这是什么？</h3><p><a href="https://github.com/npm/validate-npm-package-name" target="_blank" rel="noopener noreferrer">validate-npm-package-name</a>的作用就是：检验npm包的名称是否符合命名标准。</p><p>官网中也列出这个工具应该如何使用且举例了正确的包名称</p><div class="language-"><pre><code>var validate = require(&quot;validate-npm-package-name&quot;)\n\nvalidate(&quot;some-package&quot;)\nvalidate(&quot;example.com&quot;)\nvalidate(&quot;under_score&quot;)\nvalidate(&quot;123numeric&quot;)\nvalidate(&quot;@npm/thingy&quot;)\nvalidate(&quot;@jane/foo.js&quot;)\n</code></pre></div><h3 id=""><a class="header-anchor" href="#" aria-hidden="true">#</a></h3><h3 id="_2-学习目标"><a class="header-anchor" href="#_2-学习目标" aria-hidden="true">#</a> 2.学习目标</h3><p>粗略的看了一下源码的内容，能大致知道通过本次阅读能学习到的知识有：</p><ul><li>知道正确的包名称应该怎么命名</li><li>简单理解正则表达式</li></ul><h3 id="_3-阅读源码"><a class="header-anchor" href="#_3-阅读源码" aria-hidden="true">#</a> 3.阅读源码</h3><p>整个源码分为两个函数</p><ul><li>validate()，接收一个参数——包名称</li><li>done()，接收两个参数——警告数组、错误数组</li></ul><h4 id="_3-1-validate"><a class="header-anchor" href="#_3-1-validate" aria-hidden="true">#</a> 3.1 validate()</h4><p>这部分主要是一些字符串判断的校验</p><div class="language-"><pre><code>var validate = module.exports = function (name) {\n  var warnings = []\n  var errors = []\n\n  // 不能为null\n  if (name === null) {\n    errors.push(&#39;name cannot be null&#39;)\n    return done(warnings, errors)\n  }\n\t\n  // 不能为undefined\n  if (name === undefined) {\n    errors.push(&#39;name cannot be undefined&#39;)\n    return done(warnings, errors)\n  }\n\t\n  // 必须是一个字符串\n  if (typeof name !== &#39;string&#39;) {\n    errors.push(&#39;name must be a string&#39;)\n    return done(warnings, errors)\n  }\n\n  // 名称不能为空\n  if (!name.length) {\n    errors.push(&#39;name length must be greater than zero&#39;)\n  }\n\n  // 名称不能以.开头\n  if (name.match(/^./)) {\n    errors.push(&#39;name cannot start with a period&#39;)\n  }\n\n  // 名称不能以下划线开头\n  if (name.match(/^_/)) {\n    errors.push(&#39;name cannot start with an underscore&#39;)\n  }\n\n  // 名称尾部不能有空格\n  if (name.trim() !== name) {\n    errors.push(&#39;name cannot contain leading or trailing spaces&#39;)\n  }\n\n  /* var blacklist = [\n      &#39;node_modules&#39;,\n      &#39;favicon.ico&#39;\n\t\t]\n  */\n  // 不能出现黑名单中的名字\n  // No funny business\n  blacklist.forEach(function (blacklistedName) {\n    if (name.toLowerCase() === blacklistedName) {\n      errors.push(blacklistedName + &#39; is a blacklisted name&#39;)\n    }\n  })\n\n  \n  // 不能是node内置模块的名称，这里引入了一个包，包里是node内置模块的数组\n  // core module names like http, events, util, etc\n  builtins.forEach(function (builtin) {\n    if (name.toLowerCase() === builtin) {\n      warnings.push(builtin + &#39; is a core module name&#39;)\n    }\n  })\n\n  // 名称不可以很长很长很长很长\n  if (name.length &gt; 214) {\n    warnings.push(&#39;name can no longer contain more than 214 characters&#39;)\n  }\n\n  // 大小写不能同时出现\n  if (name.toLowerCase() !== name) {\n    warnings.push(&#39;name can no longer contain capital letters&#39;)\n  }\n\t\n  // 不能包含()~ ! *等符号\n  if (/[~&#39;!()*]/.test(name.split(&#39;/&#39;).slice(-1)[0])) {\n    warnings.push(&#39;name can no longer contain special characters (&quot;~&#39;!()*&quot;)&#39;)\n  }\n\n  // 有些内容可能会出现歧义，所以需要encode一下，比如出现/，或@baidu/anti-spam\n  // 如果encode前后内容一致，则会通过\n  // 否则会报错\n  if (encodeURIComponent(name) !== name) {\n    // Maybe it&#39;s a scoped package name, like @user/package\n    var nameMatch = name.match(scopedPackagePattern)\n    if (nameMatch) {\n      var user = nameMatch[1]\n      var pkg = nameMatch[2]\n      if (encodeURIComponent(user) === user &amp;&amp; encodeURIComponent(pkg) === pkg) {\n        return done(warnings, errors)\n      }\n    }\n\n    errors.push(&#39;name can only contain URL-friendly characters&#39;)\n  }\n\n  return done(warnings, errors)\n}\n</code></pre></div><p>这一部分已经将所有包命名规则都校验了一遍，如果出现不合理的情况时，则会往<code>errors、warnings</code>数组中push错误信息</p><h4 id="_3-2-done"><a class="header-anchor" href="#_3-2-done" aria-hidden="true">#</a> 3.2 done()</h4><p>这一部分则是对校验完的参数进行处理</p><div class="language-"><pre><code>var done = function (warnings, errors) {\n  var result = {\n    // 如果没有错误和警告，就为true\n    validForNewPackages: errors.length === 0 &amp;&amp; warnings.length === 0,\n    // 如果没有错误就为true\n    validForOldPackages: errors.length === 0,\n    warnings: warnings,\n    errors: errors\n  }\n  // 检查errors、warnings数组的长度，如果有空，则删除该属性\n  if (!result.warnings.length) delete result.warnings\n  if (!result.errors.length) delete result.errors\n  \n  // 返回一个校验后的最终结果对象\n  return result\n}\n</code></pre></div><h3 id="_4-总结"><a class="header-anchor" href="#_4-总结" aria-hidden="true">#</a> 4. 总结</h3><p>这次的源码较其他期比较简单，但也能学习到如果需要制定一个公共的约定时，需要考虑的判断因素会比较多，各方面都需要进行考虑。因此在项目开发中，对复杂的业务场景进行处理时，也应该考虑各种情况的出现，避免代码出现问题</p>',20)];t.render=function(a,r,t,s,o,l){return n(),e("div",null,i)};export{r as __pageData,t as default};
