import{u as n,q as s,g as a,x as p,K as t}from"./common-1984dd55.js";const o='{"title":"【源码第一期】Vue-DevTools部分源码阅读","frontmatter":{"date":"2021-09-14","title":"【源码第一期】Vue-DevTools部分源码阅读","tags":["源码"],"describe":"浅析 Vue-DevTools--打开组件功能"},"headers":[{"level":3,"title":"什么是Vue-DevTools？","slug":"什么是vue-devtools？"},{"level":3,"title":"要了解什么？","slug":"要了解什么？"},{"level":3,"title":"实现原理：","slug":"实现原理："},{"level":3,"title":"阅读前准备：","slug":"阅读前准备："},{"level":3,"title":"开始调试：","slug":"开始调试："},{"level":3,"title":"总结","slug":"总结"},{"level":3,"title":"相关文档和资料：","slug":"相关文档和资料："}],"relativePath":"docs/soundCode/vueDevTools.md","lastUpdated":1646063815125.8818}';var e={};const c=t('<blockquote><p>很感谢若川大佬组织的源码阅读小组活动</p><p>每天下班后逼自己学习学习</p><p>以下为若川原文：<a href="https://juejin.cn/post/6959348263547830280#heading-2" target="_blank" rel="noopener noreferrer">https://juejin.cn/post/6959348263547830280#heading-2</a></p></blockquote><h3 id="什么是vue-devtools？"><a class="header-anchor" href="#什么是vue-devtools？" aria-hidden="true">#</a> 什么是Vue-DevTools？</h3><p>作为一个Vue开发者（不是），自然少不了Chrome中的Vue调试插件。 Vue-DevTools是一个可以在Chrome中进行Vue项目调试的工具，可以帮助开发者在使用Vue开发时，更清楚的了解目前页面中的组件、数据情况。 目前该插件有两个版本，支持Vue3的Beta版本，和支持Vue2的版本。 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e8264803da804e4a9b0e43833f393cff~tplv-k3u1fbpfcp-watermark.image" alt="界面"></p><h3 id="要了解什么？"><a class="header-anchor" href="#要了解什么？" aria-hidden="true">#</a> 要了解什么？</h3><p>这次主要了解在新版本DevTools中支持了一个新特性：在选择对应的组件后，点击<code>open-in-editor</code>的按钮后，即可在编译器中打开对应的组件。</p><h3 id="实现原理："><a class="header-anchor" href="#实现原理：" aria-hidden="true">#</a> 实现原理：</h3><p>主要通过launch-editor-middleware和launch-editor两个库实现了该功能，这两个库又通过调用node的<code>process</code>、<code>child_process</code>能力，创建一个node的子进程调起编译器打开选中的组件 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4a5274aa01d4bfb89259ee898e752c3~tplv-k3u1fbpfcp-watermark.awebp" alt="组件"></p><h3 id="阅读前准备："><a class="header-anchor" href="#阅读前准备：" aria-hidden="true">#</a> 阅读前准备：</h3><ul><li>在Chrome中准备支持Vue3的最新版本插件（目前最新版本号6.0.0 beta 15）</li><li><code>vue create</code> 创建一个vue-cli3项目</li><li>准备一个编译器</li></ul><h3 id="开始调试："><a class="header-anchor" href="#开始调试：" aria-hidden="true">#</a> 开始调试：</h3><blockquote><p>Open in editor在Vue3中是一个开箱即用的功能</p><p>具体如何配置使用：Open component in editor</p></blockquote><h4 id="_1-寻找入口，进行调试"><a class="header-anchor" href="#_1-寻找入口，进行调试" aria-hidden="true">#</a> 1.寻找入口，进行调试</h4><h5 id="_1-1寻找入口"><a class="header-anchor" href="#_1-1寻找入口" aria-hidden="true">#</a> 1.1寻找入口</h5><p>根据上述文档的项目引入配置，需要在编译器中搜索<code>&#39;/__open-in-editor&#39;</code>，即可在<code>node_modules</code> 中定位到该方法，此时在此处打个点~ <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1111a85d7f584419a4c25f3208001a51~tplv-k3u1fbpfcp-watermark.awebp" alt="第一个点"></p><p>再继续进入<code>launchEditorMiddleware</code> 发现这个中间件会调用<code>launch-editor</code>进行后续的打开编译器操作，此时可以在调用<code>launch</code>函数这行打上一个点~ <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a138154cc357433b8a5934e72a036540~tplv-k3u1fbpfcp-watermark.awebp" alt="第二个点"></p><h5 id="_1-2启动调试"><a class="header-anchor" href="#_1-2启动调试" aria-hidden="true">#</a> 1.2启动调试</h5><p>以Vscode为例： 进入项目的<code>package.json</code>，可以看到在<code>script</code>属性上有一个“调试”或“debug”的按钮，点击后选择<code>serve</code>即可进入调试模式 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d227e2411e854e939247ed183c9169b1~tplv-k3u1fbpfcp-watermark.awebp" alt="启动调试"></p><blockquote><p>在这里我踩了一个小坑（也是因为自己不够谨慎）</p><p>在npm i完成之后，先npm run serve在8080端口启动了项目，再点击调试</p><p>这会造成编译器再开启一个进程在8081端口启动项目，这也许会让你在后续调试时发现无法进入断点处</p><p>此时需要注意调试启动的项目端口是否与浏览器端口一致 接下来就进入到阅读源码部分~</p></blockquote><h4 id="开始阅读："><a class="header-anchor" href="#开始阅读：" aria-hidden="true">#</a> 开始阅读：</h4><h5 id="_1-launcheditormiddleware部分"><a class="header-anchor" href="#_1-launcheditormiddleware部分" aria-hidden="true">#</a> 1.launchEditorMiddleware部分</h5><p>在项目开始编译时，就会自动进入该部分代码。</p><blockquote><p>个人理解在这部分代码中主要做了两件事：</p><p>1.函数重载，满足不同开发传参需求</p><p>2.通过node.js获取当前进程所在的位置，为后续打开编译器做准备</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// serve.js</span>\napp<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&#39;/__open-in-editor&#39;</span><span class="token punctuation">,</span> <span class="token function">launchEditorMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">To specify an editor, specify the EDITOR env variable or </span><span class="token template-punctuation string">`</span></span> <span class="token operator">+</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">add &quot;editor&quot; field to your Vue project config.\\n</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">//launch-editor-middleware/index.js</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">specifiedEditor<span class="token punctuation">,</span> srcRoot<span class="token punctuation">,</span> onErrorCallback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">//这里对传入的第一个参数做一个判断，如果该参数为函数，则将这个参数与错误回调函数的值进行对调</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> specifiedEditor <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      onErrorCallback <span class="token operator">=</span> specifiedEditor\n      specifiedEditor <span class="token operator">=</span> <span class="token keyword">undefined</span>\n    <span class="token punctuation">}</span>\n\t<span class="token comment">//同样对传入的第二个参数也是做同样的判断</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> srcRoot <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    onErrorCallback <span class="token operator">=</span> srcRoot\n    srcRoot <span class="token operator">=</span> <span class="token keyword">undefined</span>\n  <span class="token punctuation">}</span>\n\t<span class="token comment">//第二个参数如果传入的是目录，则直接用</span>\n  <span class="token comment">//如果不是则调用node.js中process的能力，获取当前进程所在的位置</span>\n  srcRoot <span class="token operator">=</span> srcRoot <span class="token operator">||</span> process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">launchEditorMiddleware</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//返回一个中间件</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n</code></pre></div><h4 id="_2-launch-editor部分"><a class="header-anchor" href="#_2-launch-editor部分" aria-hidden="true">#</a> 2 launch-editor部分</h4><h5 id="_2-1执行前路径的判断"><a class="header-anchor" href="#_2-1执行前路径的判断" aria-hidden="true">#</a> 2.1执行前路径的判断</h5><p>F12打开Vue-DevTools调试面板，选择一个组件，点击open-in-editor即可进入断点处 此时，如果切换到Chrome的Network栏时，会发现此时浏览器发送了一个请求： <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a3df5da4e5524881b03e08bcab0eb11e~tplv-k3u1fbpfcp-watermark.awebp" alt="请求"></p><p>结合编译前的<code>app.use(&#39;/__open-in-editor&#39;, launchEditorMiddleware(...)</code>不难知道这是一个中间件的写法，当浏览器发送请求时，就会进入到接下来的代码逻辑中</p><div class="language-javascript"><pre><code>module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">specifiedEditor<span class="token punctuation">,</span> srcRoot<span class="token punctuation">,</span> onErrorCallback</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token comment">// ....省略</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">launchEditorMiddleware</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 首先会读取路径中的file参数</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> file <span class="token punctuation">}</span> <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span>query <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">500</span>\n      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">launch-editor-middleware: required query param &quot;file&quot; is missing.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果存在该路径，则会执行launch-editor逻辑</span>\n      <span class="token function">launch</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>srcRoot<span class="token punctuation">,</span> file<span class="token punctuation">)</span><span class="token punctuation">,</span> specifiedEditor<span class="token punctuation">,</span> onErrorCallback<span class="token punctuation">)</span>\n      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="_2-2执行中最重要的一部分"><a class="header-anchor" href="#_2-2执行中最重要的一部分" aria-hidden="true">#</a> 2.2执行中最重要的一部分</h5><p>进入到<code>launchEditor</code>函数后，也是该功能最重要的一部分</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">launchEditor</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> specifiedEditor<span class="token punctuation">,</span> onErrorCallback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//2.2.1通过正则匹配的方式读取文件路径、行号、列号的信息并进行返回</span>\n  <span class="token keyword">const</span> parsed <span class="token operator">=</span> <span class="token function">parseFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n  <span class="token keyword">let</span> <span class="token punctuation">{</span> fileName <span class="token punctuation">}</span> <span class="token operator">=</span> parsed\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> lineNumber<span class="token punctuation">,</span> columnNumber <span class="token punctuation">}</span> <span class="token operator">=</span> parsed\n\t<span class="token comment">// 2.2.2调用node.js的方法，以同步的方式检测该路径是否存在，不存在就return结束</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\t<span class="token comment">// 这里同样是一个函数重载的方法</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> specifiedEditor <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    onErrorCallback <span class="token operator">=</span> specifiedEditor\n    specifiedEditor <span class="token operator">=</span> <span class="token keyword">undefined</span>\n  <span class="token punctuation">}</span>\n\t<span class="token comment">// 2.2.3这里跟错误回调调用了一个方法，比较有意思</span>\n  onErrorCallback <span class="token operator">=</span> <span class="token function">wrapErrorCallback</span><span class="token punctuation">(</span>onErrorCallback<span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div><p>2.2.3部分，采用了装饰器模式（感谢同组的纪年小姐姐的总结），原理是将要执行的逻辑包裹起来，先执行其他的需要处理的代码，再执行<code>onErrorCallback</code>的逻辑。 继续阅读函数~</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">wrapErrorCallback</span> <span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">fileName<span class="token punctuation">,</span> errorMessage</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">//这里先做了一个错误的输出，同时调用node.js中path的方法，提取出用&quot;/&quot;隔开的path最后一部分内容共</span>\n    <span class="token comment">//并且用了一个chalk库，可以改变控制台输出内容的颜色</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n      chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">&#39;Could not open &#39;</span> <span class="token operator">+</span> path<span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39; in the editor.&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n    <span class="token comment">// 此时如果有错误信息时，才会输出错误信息的提示</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMessage<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>errorMessage<span class="token punctuation">[</span>errorMessage<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;.&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        errorMessage <span class="token operator">+=</span> <span class="token string">&#39;.&#39;</span>\n      <span class="token punctuation">}</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n        chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">&#39;The editor process exited with an error: &#39;</span> <span class="token operator">+</span> errorMessage<span class="token punctuation">)</span>\n      <span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>cb<span class="token punctuation">)</span> <span class="token function">cb</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> errorMessage<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>若此时在这部分没有报错，则会继续进行接下来的流程。 2.2.4 此时会进入一个很“刺激”的猜测环节</p><div class="language-javascript"><pre><code><span class="token comment">//launch-editor/index.js</span>\n<span class="token keyword">function</span> <span class="token function">launchEditor</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> specifiedEditor<span class="token punctuation">,</span> onErrorCallback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token operator">...</span>\n\t<span class="token comment">// 此时代码进入猜测函数</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>editor<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">guessEditor</span><span class="token punctuation">(</span>specifiedEditor<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// launch-editor/guess.js</span>\nmodule<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">guessEditor</span> <span class="token punctuation">(</span><span class="token parameter">specifiedEditor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 第一步：判断有没有传入对应的shell命令</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>specifiedEditor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 如果传入，利用shell-quote库解析shell命令</span>\n    <span class="token keyword">return</span> shellQuote<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>specifiedEditor<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// We can find out which editor is currently running by:</span>\n  <span class="token comment">// `ps x` on macOS and Linux</span>\n  <span class="token comment">// `Get-Process` on Windows</span>\n  \n  <span class="token comment">// 第二步：猜测环节</span>\n  <span class="token comment">// 上面的三行注释也说明了可以判断当前是在哪个系统环境下运行，从而决定用何种方式启动编译器</span>\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 通过node.js中process中标识运行node.js进程的操作系统的方法获取当前的操作系统</span>\n    <span class="token comment">// 因为我的系统是MacOs，直接进入第一个猜测中</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&#39;darwin&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 此时调用了同步创建子进程的方法,这里会获取到目前的所有进程</span>\n      <span class="token keyword">const</span> output <span class="token operator">=</span> childProcess<span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">&#39;ps x&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token comment">// COMMON_EDITORS_OSX为一个map表，里面维护着MacOs下支持的编译器，以及对应的字段</span>\n      <span class="token comment">// 通过遍历的方式与当前系统中存在的编译器进行匹配</span>\n      <span class="token keyword">const</span> processNames <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token constant">COMMON_EDITORS_OSX</span><span class="token punctuation">)</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> processNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> processName <span class="token operator">=</span> processNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>output<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>processName<span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token constant">COMMON_EDITORS_OSX</span><span class="token punctuation">[</span>processName<span class="token punctuation">]</span><span class="token punctuation">]</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token comment">// ... 不同平台的我就省略了，原理类似</span>\n  <span class="token comment">// 最后还有一个兜底的方案</span>\n  <span class="token comment">// Last resort, use old skool env vars</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VISUAL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">VISUAL</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">EDITOR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">[</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">EDITOR</span><span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>2.2.5 猜测完之后的操作</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">launchEditor</span> <span class="token punctuation">(</span><span class="token parameter">file<span class="token punctuation">,</span> specifiedEditor<span class="token punctuation">,</span> onErrorCallback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n \t<span class="token comment">// ...</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>editor<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">guessEditor</span><span class="token punctuation">(</span>specifiedEditor<span class="token punctuation">)</span>\n  <span class="token comment">// 如果没有找到，就会报错</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>editor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">onErrorCallback</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\t<span class="token comment">// 核心部分，根据不同的系统状态，打开调起不同的工具打开编译器</span>\n  <span class="token comment">// childProcess.spawn为异步衍生子进程，并且不会阻塞node.js的事件循环</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&#39;win32&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// On Windows, launch the editor in a shell because spawn can only</span>\n    <span class="token comment">// launch .exe files.</span>\n    _childProcess <span class="token operator">=</span> childProcess<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span>\n      <span class="token string">&#39;cmd.exe&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">[</span><span class="token string">&#39;/C&#39;</span><span class="token punctuation">,</span> editor<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      <span class="token punctuation">{</span> <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 因为是MacOs，因此调用Vscode，打开args地址（项目地址），并且子进程将使用父进程的标准输入输出。</span>\n    <span class="token comment">// 这块Node文档参考</span>\n    <span class="token comment">// http://nodejs.cn/api/child_process.html#child_process_child_process_spawn_command_args_options</span>\n    <span class="token comment">// 到这里，对应的组件文件就已经在编译器中被打开了</span>\n    _childProcess <span class="token operator">=</span> childProcess<span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span>editor<span class="token punctuation">,</span> args<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">stdio</span><span class="token operator">:</span> <span class="token string">&#39;inherit&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  \t<span class="token comment">// 这里是对子进程结束后触发做监听，检测进程退出是否存在异常</span>\n  _childProcess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;exit&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">errorCode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    _childProcess <span class="token operator">=</span> <span class="token keyword">null</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>errorCode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">onErrorCallback</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> <span class="token string">&#39;(code &#39;</span> <span class="token operator">+</span> errorCode <span class="token operator">+</span> <span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  _childProcess<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">onErrorCallback</span><span class="token punctuation">(</span>fileName<span class="token punctuation">,</span> error<span class="token punctuation">.</span>message<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="总结"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>首先小小的表扬一下自己，终于克服了不会读不敢读源码的问题 🎉🎉🎉🎉🎉🎉🎉 以前觉得源码都很难懂，框架也很难了解真正的原理。但是通过这次活动，小小的明白了一个工具中一个小模块的实现方法，很有意思。 也很感谢若川大佬组织这次活动，辛苦了。</p><p>这次阅读的过程同时也发现了原来Node可以做很多事情，这也是之前没有了解过的知识点。</p><h3 id="相关文档和资料："><a class="header-anchor" href="#相关文档和资料：" aria-hidden="true">#</a> 相关文档和资料：</h3><p>Vue-DevTools：<a href="https://github.com/vuejs/devtools#open-component-in-editor" target="_blank" rel="noopener noreferrer">https://github.com/vuejs/devtools#open-component-in-editor</a></p><p>尤大版本launch-editor：<a href="https://github.com/yyx990803/launch-editor" target="_blank" rel="noopener noreferrer">https://github.com/yyx990803/launch-editor</a></p><p>Umijs/launch-editor：<a href="https://github.com/umijs/launch-editor" target="_blank" rel="noopener noreferrer">https://github.com/umijs/launch-editor</a></p>',44);e.render=function(t,o,e,u,l,i){const r=n("Comment");return s(),a("div",null,[c,p(r)])};export{o as __pageData,e as default};
