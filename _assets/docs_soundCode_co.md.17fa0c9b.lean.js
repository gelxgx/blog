import{q as e,g as n,l as r,K as t,j as o,k as a}from"./common-1984dd55.js";const l='{"title":"【源码第三期】简单理解co源码及实现","frontmatter":{"date":"2021-11-06","title":"【源码第三期】简单理解co源码及实现","tags":["源码"],"describe":"浅析 co源码"},"headers":[{"level":3,"title":"1. 什么是CO","slug":"_1-什么是co"},{"level":3,"title":"2. 阅读前准备","slug":"_2-阅读前准备"},{"level":3,"title":"3. 开始阅读","slug":"_3-开始阅读"},{"level":3,"title":"4. 实现简单co","slug":"_4-实现简单co"},{"level":3,"title":"","slug":""},{"level":3,"title":"总结","slug":"总结"}],"relativePath":"docs/soundCode/co.md","lastUpdated":1646063815125.8818}';var i={};const c=t('',17),d=t('',12),s=o("ul",null,[o("li",null,[a("进入onFulfilled，并记录下"),o("code",null,"generator"),a("函数执行的第一个yield返回的参数，并将该参数传入next函数")]),o("li",null,"如果传入next函数的done为true，则返回最外层的promise的resolve")],-1),u=o("ul",null,[o("li",null,"如果传入next函数的done为false，则返回value，并判断该value是否可以转为内部promise对象，如果无法转移，则抛出错误，返回最外层promise的reject"),o("li",null,[a("如果可以转化为promise对象，则执行内部promise，通过"),o("code",null,".then(onFulfilled, onRejected)"),a("开始执行")])],-1),h=o("ul",null,[o("li",null,"继续在onFulfilled、onRejected内部继续调用next函数，执行yield"),o("li",null,"当所有的yield执行返回完毕后，将最后的return值返回给最外层promise的resolve")],-1),p=t('',16);i.render=function(t,o,a,l,i,g){return e(),n("div",null,[c,r(""),d,r(""),s,r(""),u,r(""),h,r(""),p])};export{l as __pageData,i as default};
